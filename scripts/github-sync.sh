#!/bin/bash
# ============================================
# üì• SYNC GITHUB ‚Üí VPS (sem deploy)
# ============================================

set -e

# Configura√ß√µes
PROJECT_NAME="tumi-gestao"
VPS_HOST="31.97.129.119"
VPS_USER="root"
VPS_PATH="/var/www/tumi/gestao"
GITHUB_REPO="https://github.com/YOUR_USERNAME/tumi-gestao.git"  # Atualizar com repo real
TEMP_DIR="/tmp/tumi-sync-github-$$"

echo "üì• === SYNC GITHUB ‚Üí VPS ==="
echo "üìç Reposit√≥rio: $GITHUB_REPO"
echo "üìç VPS: $VPS_HOST"
echo "üìç Destino: $VPS_PATH"

# Fun√ß√£o para limpeza
cleanup() {
    echo "üßπ Limpando arquivos tempor√°rios..."
    rm -rf "$TEMP_DIR"
}

# Trap para limpeza
trap cleanup EXIT

# Valida√ß√µes iniciais
echo ""
echo "üîç Valida√ß√µes iniciais..."

# Verificar git
if ! command -v git &> /dev/null; then
    echo "‚ùå Git n√£o est√° instalado"
    echo "üí° Execute: sudo apt update && sudo apt install -y git"
    exit 1
fi

# Verificar SSH
echo "üîå Testando conectividade SSH..."
if ! ssh -o ConnectTimeout=5 "$VPS_USER@$VPS_HOST" "echo 'SSH OK'" &>/dev/null; then
    echo "‚ùå N√£o foi poss√≠vel conectar via SSH"
    echo "üí° Verifique: ssh $VPS_USER@$VPS_HOST"
    exit 1
fi

echo "‚úÖ Valida√ß√µes OK"

# Criar diret√≥rio tempor√°rio
echo ""
echo "üìÅ Preparando sync..."
mkdir -p "$TEMP_DIR"
cd "$TEMP_DIR"

# Clone do reposit√≥rio
echo ""
echo "üì• Baixando c√≥digo do GitHub..."
git clone "$GITHUB_REPO" .

# Validar arquivos essenciais
echo ""
echo "üîç Validando arquivos..."
REQUIRED_FILES=("package.json" "src/App.tsx" "server/index.ts")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Arquivo essencial n√£o encontrado: $file"
        exit 1
    fi
done

echo "‚úÖ Arquivos validados"

# Criar pacote
echo ""
echo "üì¶ Preparando pacote..."
tar czf "../${PROJECT_NAME}-sync.tar.gz" \
    --exclude=node_modules \
    --exclude=.git \
    --exclude=.env \
    --exclude=dist \
    --exclude=server/dist \
    --exclude=tmp \
    --exclude="*.log" \
    --exclude=.DS_Store \
    .

# Upload para VPS
echo ""
echo "üì§ Enviando arquivos para VPS..."
scp "../${PROJECT_NAME}-sync.tar.gz" "$VPS_USER@$VPS_HOST:/tmp/"

# Sync remoto (sem build)
echo ""
echo "üîÑ Sincronizando arquivos na VPS..."
ssh "$VPS_USER@$VPS_HOST" << 'REMOTE_SYNC'
set -e

echo "üìÅ Extraindo arquivos..."
cd /tmp
tar xzf tumi-gestao-sync.tar.gz

echo "üíæ Fazendo backup da configura√ß√£o atual..."
mkdir -p /var/backups/tumi-gestao-sync/$(date +%Y%m%d-%H%M%S)
if [ -f "/var/www/tumi/gestao/.env" ]; then
    cp /var/www/tumi/gestao/.env /var/backups/tumi-gestao-sync/$(date +%Y%m%d-%H%M%S)/
fi
if [ -f "/var/www/tumi/gestao/ecosystem.config.cjs" ]; then
    cp /var/www/tumi/gestao/ecosystem.config.cjs /var/backups/tumi-gestao-sync/$(date +%Y%m%d-%H%M%S)/
fi

echo "üîÑ Sincronizando c√≥digo..."
# Preservar arquivos de configura√ß√£o
rsync -av \
    --exclude='.env' \
    --exclude='ecosystem.config.cjs' \
    --exclude='node_modules' \
    --exclude='dist' \
    --exclude='server/dist' \
    ./ /var/www/tumi/gestao/

echo "üîß Configurando permiss√µes..."
chmod +x /var/www/tumi/gestao/scripts/*.sh 2>/dev/null || true

echo "üßπ Limpando..."
rm -f /tmp/tumi-gestao-sync.tar.gz
rm -rf /tmp/src /tmp/server /tmp/scripts /tmp/package.json 2>/dev/null || true

echo "‚úÖ Sync conclu√≠do - arquivos atualizados"
REMOTE_SYNC

echo ""
echo "‚úÖ === SYNC CONCLU√çDO ==="
echo "üìÅ Arquivos sincronizados em: $VPS_PATH"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "   1. Para fazer deploy completo:"
echo "      ssh $VPS_USER@$VPS_HOST 'cd $VPS_PATH && ./scripts/deploy-with-sync.sh'"
echo ""
echo "   2. Para deploy r√°pido:"
echo "      ssh $VPS_USER@$VPS_HOST 'cd $VPS_PATH && ./scripts/quick-deploy.sh'"
echo ""
echo "   3. Para deploy autom√°tico direto do GitHub:"
echo "      ./scripts/github-deploy.sh"